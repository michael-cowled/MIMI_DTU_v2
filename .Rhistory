FinalCount > 1 && abs(UV_Mean) < 2) {
Coculture_df2 <- rbind(Coculture_df2,
c(PeakNo_CC = Coculture$Peak[i],
RetTime_CC = Coculture$RetTime[i],
PeakArea_CC = Coculture$Area[i],
PeakNo_CON2 = CON2$Peak[z],
RetTime_CON2 = CON2$RetTime[z],
PeakArea_CON2 = CON2$Area[z],
UV_Count_CON2 = FinalCount,
Subtracted_UV_Mean_CON2 = UV_Mean,
PeakRatio_CON2 = ratio))
i <- i+1
}   else if (Coculture$RetTime[i] < (CON2$RetTime[z] + 0.05) &&
Coculture$RetTime[i] > (CON2$RetTime[z] -0.05) &&
FinalCount > 1) {
Coculture_df2 <- rbind(Coculture_df2,
c(PeakNo_CC = Coculture$Peak[i],
RetTime_CC = Coculture$RetTime[i],
PeakArea_CC = Coculture$Area[i],
PeakNo_CON2 = CON2$Peak[z],
RetTime_CON2 = CON2$RetTime[z],
PeakArea_CON2 = CON2$Area[z],
UV_Count_CON2 = FinalCount,
Subtracted_UV_Mean_CON2 = UV_Mean,
PeakRatio_CON2 = ratio))
i <- i+1
}   else  {
Coculture_df2 <- rbind(Coculture_df2,
c(PeakNo_CC = Coculture$Peak[i],
RetTime_CC = Coculture$RetTime[i],
PeakArea_CC = Coculture$Area[i],
PeakNo_CON2 = NA, RetTime_CON2 = NA,
PeakArea_CON2 = NA, UV_Count_CON2 = NA,
Subtracted_UV_Mean_CON2 = NA,
PeakRatio_CON2 = NA))
i <- i+1
}
}
return(Coculture_df2)
}
#############################################
#9.CON Consolidator: Removes double peak matching to a coculture peak
#############################################
#The following code removes double assignments to a coculture peak
#from two different controls.
#An example is that perhaps peak 1 from the coculture matches
#to peak 1 in CON1 and peak 2 in CON2.
#This function will determine which control's matched peak matches
#closest and remove the assignment for the weakest match.
CON_Consolidator <- function(Coculture_df, CON1_Name, CON2_Name) {
RowNo <- 1
Rows <- nrow(Coculture_df)
#sets up a new tidier version of the df
MatchedPeak_df <- setNames(data.frame(matrix(ncol = 7,
nrow = nrow(Coculture_df))),
c("Matched_CON", "PeakNo_CON", "RetTime_CON",
"PeakArea_CON", "UV_Count",
"Subtracted_UV_Mean", "PeakRatio"))
while (RowNo <= Rows+1) {
if (is.na(Coculture_df[RowNo, 4]) &&
is.na(Coculture_df[RowNo, 10])) {
RowNo <- RowNo + 1
}   else if (!is.na(Coculture_df[RowNo, 4]) &&
!is.na(Coculture_df[RowNo, 10] &&
abs(Coculture_df[RowNo, 8]) <
abs(Coculture_df[RowNo, 14]))) {
#When there are two peaks matched (!is.na for both),
#the UV_means are compared, with the higher removed.
MatchedPeak_df[RowNo, 1] <- CON1_Name
MatchedPeak_df[RowNo, 2:7] <- Coculture_df[RowNo, 4:9]
RowNo <- RowNo + 1
}   else if (!is.na(Coculture_df[RowNo, 4]) &&
!is.na(Coculture_df[RowNo, 10] &&
abs(Coculture_df[RowNo, 8]) >
abs(Coculture_df[RowNo, 14]))) {
MatchedPeak_df[RowNo, 1] <- CON2_Name
MatchedPeak_df[RowNo, 2:7] <- Coculture_df[RowNo, 10:15]
RowNo <- RowNo + 1
}   else if (is.na(Coculture_df[RowNo, 10]))   {
#If no double-peak mactching but signifies a matched CON1 peak
#then CON1 peak set as the matched peak
MatchedPeak_df[RowNo, 1] <- CON1_Name
MatchedPeak_df[RowNo, 2:7] <- Coculture_df[RowNo, 4:9]
RowNo <- RowNo + 1
}   else {
#If no double-peak mactching or matched CON1 peak
#then CON2 peak set as the matched peak
MatchedPeak_df[RowNo, 1] <- CON2_Name
MatchedPeak_df[RowNo, 2:7] <- Coculture_df[RowNo, 10:15]
RowNo <- RowNo + 1
}
}
return(MatchedPeak_df)
}
#############################################
#10.Metabolite Effect Characteriser: Converting PeakRatio to a Factor
#############################################
#The following piece of code adds a column that categorises the peak
#areas into suppressions, and enhancements
Effect_Categoriser <- function(Refined_Coculture_df, Coculture_Name) {
RowNo <- 1
Rows <- nrow(Refined_Coculture_df)
#A df is created to list the effects corresponding to matched peaks
Metabolite_effect_df <- setNames(data.frame(matrix(ncol=1, nrow=Rows)),
c("Metabolite_Effect"))
while (RowNo <= Rows) {
if (Refined_Coculture_df[RowNo, 1] == Coculture_Name &&
is.na(Refined_Coculture_df[RowNo, 11])) {
Metabolite_effect_df[RowNo, 1] <- 6 #Induction
RowNo <- RowNo + 1
}   else if (Refined_Coculture_df[RowNo, 1] == Coculture_Name &&
Refined_Coculture_df[RowNo, 11] > -100
&& Refined_Coculture_df[RowNo, 11] <= -20) {
Metabolite_effect_df[RowNo, 1] <- 2 #Suppression
RowNo <- RowNo + 1
}   else if (Refined_Coculture_df[RowNo, 1] == Coculture_Name &&
Refined_Coculture_df[RowNo, 11] > -20
&& Refined_Coculture_df[RowNo, 11] < 20) {
Metabolite_effect_df[RowNo, 1] <- 3 #Little to No Change
RowNo <- RowNo + 1
}   else if (Refined_Coculture_df[RowNo, 1] == Coculture_Name &&
Refined_Coculture_df[RowNo, 11] >= 20
&& Refined_Coculture_df[RowNo, 11] < 100) {
Metabolite_effect_df[RowNo, 1] <- 4 #Enhancement
RowNo <- RowNo + 1
}   else if (Refined_Coculture_df[RowNo, 1] == Coculture_Name &&
Refined_Coculture_df[RowNo, 11] >= 100) {
Metabolite_effect_df[RowNo, 1] <- 5 #Major Enhancement
RowNo <- RowNo + 1
}
}
Refined_Coculture_df <-
cbind(Refined_Coculture_df, Metabolite_effect_df)
return(Refined_Coculture_df)
}
#############################################
#11.Simple Metabolite Effect Characteriser:
#############################################
#This is a simple version of the effect categoriser with a single ratio input
Simple_Effect_Categoriser <- function(ratio) {
if (ratio > -100 && ratio <= 20) {
Effect <- 2
return(Effect)
}   else if (ratio > -20 && ratio < 20) {
Effect <- 3
return(Effect)
}   else if (ratio >= 20 && ratio < 100) {
Effect <- 4
return(Effect)
}   else if (ratio >= 100) {
Effect <- 5
return(Effect)
}
}
#############################################
#12.NON_UV Peak Matcher: Further assigns peaks based on weaker criteria.
#############################################
Non_UV_Matcher <- function(Interaction_Matrix) {
Matrix_TotalRows <- nrow(Interaction_Matrix)
Matrix_Row_No <- 1
while (Matrix_Row_No <= Matrix_TotalRows) {
#Reads in the first coculture output file to be amended.
#Reads in the the corresponding CON files from raw NovaC.
CON1_Name <- as.character(Interaction_Matrix[Matrix_Row_No,1])
CON2_Name <- as.character(Interaction_Matrix[Matrix_Row_No,2])
Coculture_Name <- as.character(Interaction_Matrix[Matrix_Row_No,3])
df_Name <-
read.csv(paste0("Testing Broad-Scale Interactions/OutputFiles/",
Coculture_Name, ".csv"))
CON1 <- as.data.frame(Read_Excel(CON1_Name))
CON2 <- as.data.frame(Read_Excel(CON2_Name))
Coculture <- as.data.frame(Read_Excel(Coculture_Name))
Matrix_Row_No <- Matrix_Row_No + 1
n <- nrow(df_Name)
i <- 1
#'i' corresponds to the peak no. to be matched in the coculture
#This is a second set of peak matching that improves on the first round.
while (i < n+1) {
z1 <- which(abs(CON1$RetTime-Coculture$RetTime[i]) ==
min(abs(CON1$RetTime-Coculture$RetTime[i])))
z2 <- which(abs(CON2$RetTime-Coculture$RetTime[i]) ==
min(abs(CON2$RetTime-Coculture$RetTime[i])))
FinalCount1 <- UVcheck1(CON1, Coculture, i, z = z1)
FinalCount2 <- UVCheck2(CON2, Coculture, i, z = z2)
if (!is.na(df_Name$Matched_CON[i]) |
(any(df_Name[,7] == CON1$RetTime[z1], na.rm = TRUE)) |
(any(df_Name[,7] == CON2$RetTime[z2], na.rm = TRUE))) {
#Checks for peak matching already, and skips to the next peak.
i <- i+1
}   else if (Coculture$RetTime[i] < (CON1$RetTime[z1] + 0.05) &&
Coculture$RetTime[i] > (CON1$RetTime[z1] -0.05) &&
FinalCount1 < 2)    {
#Checks if the closest match in CON1 satisfies this test.
z <- z1
ratio = (((Coculture[i,3] - CON1[z,3])/CON1[z,3])*100)
Effect <- Simple_Effect_Categoriser(ratio)
#Assignments of the matched peak
df_Name$Matched_CON[i] <- CON1_Name
df_Name$PeakNo_CON[i] <- CON1$Peak[z]
df_Name$RetTime_CON[i] <- CON1$RetTime[z]
df_Name$PeakArea_CON[i] <- CON1$Area[z]
df_Name$UV_Count[i] <- FinalCount1
df_Name$PeakRatio[i] <- ratio
df_Name$Metabolite_Effect[i] <- Effect
i <- i+1
}   else if (Coculture$RetTime[i] < (CON2$RetTime[z2] + 0.05) &&
Coculture$RetTime[i] > (CON2$RetTime[z2] -0.05) &&
FinalCount2 < 2)    {
z <- z2
ratio = (((Coculture[i,3] - CON2[z,3])/CON2[z,3])*100)
Effect <- Simple_Effect_Categoriser(ratio)
df_Name$Matched_CON[i] <- CON2_Name
df_Name$PeakNo_CON[i] <- CON2$Peak[z]
df_Name$RetTime_CON[i] <- CON2$RetTime[z]
df_Name$PeakArea_CON[i] <- CON2$Area[z]
df_Name$UV_Count[i] <- FinalCount2
df_Name$PeakRatio[i] <- ratio
df_Name$Metabolite_Effect[i] <- Effect
i <- i+1
}    else {
i <- i+1
}
}
write.csv(df_Name,
paste0("Testing Broad-Scale Interactions/OutputFiles/",
Coculture_Name, ".CSV"), row.names = FALSE)
}
}
#############################################
#13.Double Peak Remover: Removes doubley-assigned peaks from a control.
#############################################
#An example is that perhaps the peaks 1 and 2 from the coculture match to
#twice to peak 1 in the control.
#This function will determine which peak from the control matches closest
#and remove the assignment for the weakest match.
Double_Peak_Remover <- function(Interaction_Matrix) {
Logic_TotalRows <- 1
while (Logic_TotalRows > 0) {
Matrix_TotalRows <- nrow(Interaction_Matrix)
Matrix_Row_No <- 1
Logic_Table <- setNames(data.frame(matrix(ncol = 1, nrow = 0)),
c("Coculture_Name"))
#A df is set up to list the instances where double-peak matching occurs.
while (Matrix_Row_No <= Matrix_TotalRows) {
Coculture_Name <- as.character(Interaction_Matrix[Matrix_Row_No,3])
Coculture_Name2 <- setNames(data.frame(matrix(ncol = 1, nrow = 0)),
c("Coculture_Name"))
Coculture_Name2[1,1] <- Coculture_Name
df_Name <-
read.csv(paste0("Testing Broad-Scale Interactions/OutputFiles/",
Coculture_Name, ".csv"))
df_Name <- unite(df_Name, Combined, c(Matched_CON, PeakNo_CON),
sep = "-", remove = FALSE)
df_Name <- filter(df_Name, Combined !="NA-NA")
logic <- length(unique(df_Name$Combined)) == nrow(df_Name)
#Compares the no. of unique peaks assigned in the control
#If the no. of unique peaks differs to the no. of peaks in the
#coculture, then it will be incorporated in the logic_table
if (logic == TRUE) {
Matrix_Row_No <- Matrix_Row_No +1
} else {
Logic_Table <- rbind(Logic_Table, Coculture_Name2)
Matrix_Row_No <- Matrix_Row_No +1
}
}
#Now to use the logic_table to read in the files that need fixing.
#Note: Only 1 peak is fixed at a time, and so will go back through
#and regenerate the logic_table and check if more peaks need fixing.
Logic_TotalRows <- nrow(Logic_Table)
Logic_Row_No <- 1
while (Logic_Row_No <= Logic_TotalRows) {
#Preprocessing code to read and manipulate the file of interest
Coculture_Name <- as.character(Logic_Table[Logic_Row_No,1])
print(Coculture_Name)
df_Name <-
read.csv(paste0("Testing Broad-Scale Interactions/OutputFiles/",
Coculture_Name, ".csv"))
df_Name <- unite(df_Name, Combined, c(Matched_CON, PeakNo_CON),
sep = "-", remove = FALSE)
df_Name4 <- df_Name
df_Name <- filter(df_Name, Combined != "NA-NA")
df_Name$Duplicated <- duplicated(df_Name$Combined)
df_Name2 <- filter(df_Name, Duplicated == TRUE)
df_Name3 <- filter(df_Name, Combined == df_Name2[1, 5])
if (df_Name3[1,10] > df_Name3[2,10]) {
#Peaks are compared based on UV count first.
#The peak with the lowest UV count is removed.
Bad_Peak <- df_Name3[2,2]
df_Name4[Bad_Peak, 5:12] <- NA
}   else if (df_Name3[1,10] < df_Name3[2,10]) {
Bad_Peak <- df_Name3[1,2]
df_Name4[Bad_Peak, 5:12] <- NA
}   else if (df_Name3[1,11] < df_Name3[2,11]) {
#If the UV counts are equal the subtracted UV mean is compared.
#The peak with the highest UV mean is removed.
Bad_Peak <- df_Name3[2,2]
df_Name4[Bad_Peak, 5:12] <- NA
}   else {
Bad_Peak <- df_Name3[1,2]
df_Name4[Bad_Peak, 5:12] <- NA
}
df_Name4 <- select(df_Name4, -Combined)
write.csv(df_Name4,
paste0("Testing Broad-Scale Interactions/OutputFiles/",
Coculture_Name, ".CSV"), row.names = FALSE)
Logic_Row_No <- Logic_Row_No + 1
}
}
}
#############################################
#14.Missing Control Peaks: Adds in the unassigned peaks from the control(s)
#############################################
Missing_Control_Peaks <- function(Interaction_Matrix) {
Matrix_TotalRows <- nrow(Interaction_Matrix)
Matrix_Row_No <- 1
while (Matrix_Row_No <= Matrix_TotalRows) {
#Reads in the first coculture output file to be amended.
#Reads in the the corresponding CON files from raw NovaC.
CON1_Name <- as.character(Interaction_Matrix[Matrix_Row_No,1])
CON2_Name <- as.character(Interaction_Matrix[Matrix_Row_No,2])
Coculture_Name <- as.character(Interaction_Matrix[Matrix_Row_No,3])
df_Name <-
read.csv(paste0("Testing Broad-Scale Interactions/OutputFiles/",
Coculture_Name, ".csv"))
df_Name$Sample_Ref <- as.character(df_Name$Sample_Ref)
df_Name <- unite(df_Name, Combined, c(Matched_CON, PeakNo_CON),
sep = "-", remove = FALSE)
CON1 <- as.data.frame(Read_Excel(CON1_Name))
CON2 <- as.data.frame(Read_Excel(CON2_Name))
Matrix_Row_No <- Matrix_Row_No + 1
n <- nrow(CON1)
i <- 1
#Sequentially checks CON1 for peak 'i' in coculture output file
while (i <= n) {
if (any(df_Name[,5] == paste0(CON1_Name, "-", i), na.rm = TRUE)) {
i <- i +1
}   else if (any(df_Name[,5] != paste0(CON1_Name, "-", i),
na.rm = TRUE)) {
df_Name <- rbind(df_Name,
c(Sample_Ref = CON1_Name, PeakNo_CC = NA,
RetTime_CC = NA, PeakArea_CC = NA,
Combined = NA, MAtched_CON = NA,
PeakNo_CON = CON1$Peak[i],
RetTime_CON = CON1$RetTime[i],
PeakArea_CON = CON1$Area[i],
UV_Count = NA, Subtracted_UV_Mean = NA,
PeakRatio = -100, Metabolite_Effect = 1))
i <- i + 1
}   else {
i <- i + 1
}
}
Matrix_Row_No <- Matrix_Row_No + 1
n <- nrow(CON2)
i <- 1
while (i <= n) {
if (any(df_Name[,5] == paste0(CON2_Name, "-", i), na.rm = TRUE)) {
i <- i +1
}   else if (any(df_Name[,5] != paste0(CON2_Name, "-", i),
na.rm = TRUE)) {
df_Name <- rbind(df_Name,
c(Sample_Ref = CON2_Name, PeakNo_CC = NA,
RetTime_CC = NA, PeakArea_CC = NA,
Combined = NA, MAtched_CON = NA,
PeakNo_CON = CON2$Peak[i],
RetTime_CON = CON2$RetTime[i],
PeakArea_CON = CON2$Area[i],
UV_Count = NA, Subtracted_UV_Mean = NA,
PeakRatio = -100, Metabolite_Effect = 1))
i <- i + 1
}   else {
i <- i + 1
}
}
df_Name <- select(df_Name, -Combined)
write.csv(df_Name,
paste0("Testing Broad-Scale Interactions/OutputFiles/",
Coculture_Name, ".CSV"), row.names = FALSE)
}
}
#############################################
#MIMI: The main working-function to compare the peak-matching and refinement
#############################################
MIMI <- function() {
#Will not work unless Interaction_Matrix object created by the user.
Matrix_TotalRows <- nrow(Interaction_Matrix)
Matrix_Row_No <- 1
while (Matrix_Row_No <= Matrix_TotalRows) {
CON1_Name <- as.character(Interaction_Matrix[Matrix_Row_No,1])
CON2_Name <- as.character(Interaction_Matrix[Matrix_Row_No,2])
Coculture_Name <- as.character(Interaction_Matrix[Matrix_Row_No,3])
Matrix_Row_No <- Matrix_Row_No +1
#Generates 3 dataframes using the Read_Excel function for the first
#interction to be investigated from the Interaction_Matrix
CON1 <- as.data.frame(Read_Excel(CON1_Name))
CON2 <- as.data.frame(Read_Excel(CON2_Name))
Coculture <- as.data.frame(Read_Excel(Coculture_Name))
#Generates 3 dataframes using the Read_UV function
CON1_UV <- as.data.frame(Read_UV(CON1_Name))
CON2_UV <- as.data.frame(Read_UV(CON2_Name))
Coculture_UV <- as.data.frame(Read_UV(Coculture_Name))
#sets up a df to be expanded and exported to csv
Coculture_df <- Peak_Matcher1(CON1, Coculture, CON1_UV, Coculture_UV)
#The following repeats for CON2
Coculture_df2 <- Peak_Matcher2(CON2, Coculture, CON2_UV, Coculture_UV)
#The two dfs for CON1 and CON2 are merged together
Coculture_df <- cbind(Coculture_df, Coculture_df2[, 4:9])
#Removes the first arbitrary row of missing values
Coculture_df <- Coculture_df[2:nrow(Coculture_df), ]
#Performs a function to correct for double peak matching to a unique
#peak to peaks from more than one CON
MatchedPeak_df <- CON_Consolidator(Coculture_df, CON1_Name, CON2_Name)
#Final processing steps in creating the tidied df (Refined_Coculture_df)
MatchedPeak_df <- MatchedPeak_df[1:nrow(MatchedPeak_df), ]
df <- setNames(data.frame(matrix(ncol = 1, nrow = nrow(Coculture_df))),
"Sample_Ref")
df[1:nrow(df), ] <- Coculture_Name
Refined_Coculture_df <- Coculture_df[1:nrow(Coculture_df), 1:3]
Refined_Coculture_df <- cbind(df, Refined_Coculture_df)
Refined_Coculture_df <- cbind(Refined_Coculture_df, MatchedPeak_df)
#Performs a function to characterise effects onto metabolites
#and adds this into the tidied data set
Refined_Coculture_df <-
Effect_Categoriser(Refined_Coculture_df, Coculture_Name)
#Rewrites the tidied dataset to file
write.csv(Refined_Coculture_df,
paste0("Testing Broad-Scale Interactions/OutputFiles/",
Coculture_Name, ".CSV"), row.names = FALSE)
}
#Carries out the last two functions:
#1.Double_Peak_Remover: Multiple peaks in a coculture matched to the same
#unique peak of a control
#2.Missing_Control_Peaks: Unique peaks from control(s) not matched to a peak
#in the coculture, are added into a single, unified df
print("Initiating Double_Peak_Remover")
Double_Peak_Remover(Interaction_Matrix)
print("Initiating Non_UV_Matcher")
Non_UV_Matcher(Interaction_Matrix)
print("Initiating Missing_Control_Peaks")
Missing_Control_Peaks(Interaction_Matrix)
print("MIMI completed.")
}
#Load in excel file named Interaction_Matrix and use MIMI() function:
Effect_1 <- filter(full_list, Metabolite_Effect == 1)
Effect_2 <- filter(full_list, Metabolite_Effect == 2)
Effect_3 <- filter(full_list, Metabolite_Effect == 3)
Effect_4 <- filter(full_list, Metabolite_Effect == 4)
Effect_5 <- filter(full_list, Metabolite_Effect == 5)
Effect_6 <- filter(full_list, Metabolite_Effect == 6)
remove(Effect_7)
boxplot(F1v$RetTime_CON ~ F1v$Metabolite_Effect)
F1v$Metabolite_Effect
View(F1v)
library(readxl)
Interaction_Matrix <- read_excel("Testing Broad-Scale Interactions/Mini_Matrix_Test.xlsx")
View(Interaction_Matrix)
MIMI()
filenames <- list.files(path = "Testing Broad-Scale Interactions/OutputFiles/", pattern = "F", full.names = TRUE)
my_data <- lapply(filenames, read.csv)
full_list <- rbindlist(my_data, use.names=TRUE, fill=FALSE)
full_list <- transform(full_list, Metabolite_Effect = factor(Metabolite_Effect))
filenames <- list.files(path = "Testing Broad-Scale Interactions/OutputFiles/", pattern = "F1v", full.names = TRUE)
my_data <- lapply(filenames, read.csv)
F1v <- rbindlist(my_data, use.names=TRUE, fill=FALSE)
F1v <- transform(F1v, Metabolite_Effect = factor(Metabolite_Effect))
F1v
View(F1v$Metabolite_Effect)
F1v$Metabolite_Effect
boxplot(F1v$RetTime_CON ~ F1v$Metabolite_Effect)
library(readxl)
Interaction_Matrix <- read_excel("Interaction_Matrix.xlsx")
View(Interaction_Matrix)
MIMI()
filenames <- list.files(path = "Testing Broad-Scale Interactions/OutputFiles/", pattern = "F", full.names = TRUE)
my_data <- lapply(filenames, read.csv)
full_list <- rbindlist(my_data, use.names=TRUE, fill=FALSE)
full_list <- transform(full_list, Metabolite_Effect = factor(Metabolite_Effect))
#Filters into different lists based on metabolite_effect
Effect_1 <- filter(full_list, Metabolite_Effect == 1)
Effect_2 <- filter(full_list, Metabolite_Effect == 2)
Effect_3 <- filter(full_list, Metabolite_Effect == 3)
Effect_4 <- filter(full_list, Metabolite_Effect == 4)
Effect_5 <- filter(full_list, Metabolite_Effect == 5)
Effect_6 <- filter(full_list, Metabolite_Effect == 6)
par(mfrow=c(2,3))
hist(Effect_1$RetTime_CON, main = "Complete Suppression")
hist(Effect_2$RetTime_CC, main = "Suppression")
hist(Effect_3$RetTime_CC, main = "Little to No Change")
hist(Effect_4$RetTime_CC, main = "Enhancement")
hist(Effect_5$RetTime_CC, main = "Major Enhancement")
hist(Effect_6$RetTime_CC, main = "Induction or Unmatched")
par(mfrow=c(3,5), mar=c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1))
for (i in 1:15) {
filenames <- list.files(path = "Testing Broad-Scale Interactions/OutputFiles/", pattern = paste0("F", i, "v"), full.names = TRUE)
my_data <- lapply(filenames, read.csv)
a <- rbindlist(my_data, use.names=TRUE, fill=FALSE)
a  <- transform(a , Metabolite_Effect = factor(Metabolite_Effect))
boxplot(a$RetTime_CON ~ a$Metabolite_Effect, main = paste0("F", i, "v"), xlab="", ylab="") }
par(mfrow=c(3,5), mar=c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1))
for (i in 1:15) {
filenames <- list.files(path = "Testing Broad-Scale Interactions/OutputFiles/", pattern = paste0("F", i, "v"), full.names = TRUE)
my_data <- lapply(filenames, read.csv)
a <- rbindlist(my_data, use.names=TRUE, fill=FALSE)
a  <- transform(a , Metabolite_Effect = factor(Metabolite_Effect))
boxplot(a$RetTime_CC ~ a$Metabolite_Effect, main = paste0("F", i, "v"), xlab="", ylab="") }
par(mfrow=c(1, 2)
)
boxplot(F1v$RetTime_CON ~ F1v$Metabolite_Effect)
par(mfrow=c(2,3))
boxplot(full_listv$RetTime_CON ~ full_list$Metabolite_Effect)
boxplot(full_list$RetTime_CON ~ full_list$Metabolite_Effect)
boxplot(full_list$RetTime_CC ~ full_list$Metabolite_Effect)
